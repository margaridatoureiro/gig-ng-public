{"version":3,"file":"e-is-ngx-material-table.js","sources":["../esm2015/src/src/app/ngx-material-table/default-validator.service.ts","../esm2015/src/src/app/ngx-material-table/table-element.ts","../esm2015/src/src/app/ngx-material-table/table-element-reactive-forms.ts","../esm2015/src/src/app/ngx-material-table/table-element-template-driven.ts","../esm2015/src/src/app/ngx-material-table/table-element.factory.ts","../esm2015/src/src/app/ngx-material-table/table-data-source.ts","../esm2015/src/src/app/ngx-material-table/validator.service.ts","../../e-is-ngx-material-table.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { ValidatorService } from './validator.service';\n\n@Injectable()\nexport class DefaultValidatorService implements ValidatorService {\n\n  getRowValidator(): FormGroup {\n    return null;\n  }\n}\n","import { FormGroup } from '@angular/forms';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport { TableDataSource } from './table-data-source';\n\nexport abstract class TableElement<T> {\n  id: number;\n  originalData?: T;\n  source: TableDataSource<T>;\n\n  abstract get editing(): boolean;\n  abstract set editing(editing: boolean);\n  abstract get currentData(): T;\n  abstract set currentData(currentData: T);\n  abstract get validator(): FormGroup;\n  abstract set validator(validator: FormGroup);\n\n  delete(): void {\n    this.source.delete(this.id);\n  }\n\n  confirmEditCreate(): boolean {\n    if (this.id === -1) {\n      return this.source.confirmCreate(this);\n    }\n    else {\n      return this.source.confirmEdit(this);\n    }\n  }\n\n  startEdit(): void {\n    this.originalData = cloneDeep(this.currentData);\n    this.editing = true;\n  }\n\n  cancelOrDelete() {\n    if (this.id == -1 || !this.editing)\n      this.delete();\n    else {\n      this.currentData = this.originalData;\n      this.editing = false;\n    }\n  }\n\n  abstract isValid(): boolean;\n}\n","import { TableElement } from './table-element';\nimport { FormGroup } from '@angular/forms';\n\nimport { TableDataSource } from './table-data-source';\n\nexport class TableElementReactiveForms<T> extends TableElement<T> {\n  id: number;\n  originalData?: T;\n  source: TableDataSource<T>;\n  validator: FormGroup;\n\n  get currentData(): T {\n    return this.validator.getRawValue();\n  }\n\n  set currentData(data :T) {\n    this.validator.patchValue(data);\n  }\n\n  get editing(): boolean {\n    return this.validator.enabled;\n  }\n\n  set editing(value :boolean) {\n    if(value) {\n      this.validator.enable();\n    } else {\n      this.validator.disable();\n    }\n  }\n\n  constructor(init: Partial<TableElementReactiveForms<T>>) {\n    super();\n    this.validator = init.validator;\n    Object.assign(this, init);\n  }\n\n  isValid() {\n    return this.validator.valid;\n  }\n}\n","import { FormGroup } from '@angular/forms';\n\nimport { TableDataSource } from './table-data-source';\n\nimport { TableElement } from './table-element';\n\nexport class TableElementTemplateDriven<T> extends TableElement<T> {\n  id: number;\n  _editing: boolean;\n  _currentData: T;\n  originalData?: T;\n  source: TableDataSource<T>;\n\n  get validator(): any {\n    return null;\n  }\n\n  set validator(value: any) { }\n\n  get currentData(): T {\n    return this._currentData;\n  }\n\n  set currentData(data :T) {\n    this._currentData = data;\n  }\n\n  get editing(): boolean {\n    return this._editing;\n  }\n\n  set editing(value :boolean) {\n    this._editing = value;\n  }\n\n  constructor(init: Partial<TableElementTemplateDriven<T>>) {\n    super();\n    Object.assign(this, init);\n  }\n\n  isValid() {\n    return true;\n  }\n}\n","import { TableElementReactiveForms } from './table-element-reactive-forms';\nimport { TableElementTemplateDriven } from './table-element-template-driven';\n\nexport class TableElementFactory {\n\n  public static createTableElement(newElement: any): any {\n    if (this.isValidatorDefined(newElement)) {\n      // Create reactive forms element here.\n      return new TableElementReactiveForms(newElement);\n    } else {\n      // Default is the one without validator.\n      return new TableElementTemplateDriven(newElement);\n    }\n  }\n\n  static isValidatorDefined(newElement: any) {\n    return newElement.validator != null && newElement.validator != undefined; \n  }\n}","import {CollectionViewer, DataSource, ListRange} from '@angular/cdk/collections';\n\nimport {BehaviorSubject, Observable, Subject, Subscribable, Subscription} from 'rxjs';\n\nimport { TableElementFactory } from './table-element.factory';\nimport { ValidatorService } from './validator.service';\nimport { TableElement } from './table-element';\nimport { DefaultValidatorService } from './default-validator.service';\nimport {map} from 'rxjs/operators';\n\nexport class TableDataSource<T> extends DataSource<TableElement<T>> {\n\n  protected rowsSubject: BehaviorSubject<TableElement<T>[]>;\n  datasourceSubject: Subject<T[]>;\n\n  protected dataConstructor: new () => T;\n  protected dataKeys: any[];\n  protected connectedViewers: {\n    viewer: CollectionViewer;\n    subscription: Subscription;\n    range: ListRange;\n  }[] = [];\n\n  protected currentData: any;\n\n  /**\n   * Creates a new TableDataSource instance, that can be used as datasource of `@angular/cdk` data-table.\n   * @param data Array containing the initial values for the TableDataSource. If not specified, then `dataType` must be specified.\n   * @param dataType Type of data contained by the Table. If not specified, then `data` with at least one element must be specified.\n   * @param validatorService Service that create instances of the FormGroup used to validate row fields.\n   * @param config Additional configuration for table.\n   */\n  constructor(\n    data: T[],\n    dataType?: new () => T,\n    private validatorService?: ValidatorService,\n    private config = { prependNewElements: false, suppressErrors: false }) {\n    super();\n\n    if (!validatorService) {\n      this.validatorService = new DefaultValidatorService();\n    }\n\n    if (dataType) {\n      this.dataConstructor = dataType;\n    } else {\n      if (data && data.length > 0) {\n        this.dataKeys = Object.keys(data[0]);\n      } else {\n        throw new Error('You must define either a non empty array, or an associated class to build the table.');\n      }\n    }\n\n    this.checkValidatorFields(this.validatorService);\n\n    this.rowsSubject = new BehaviorSubject(this.getRowsFromData(data));\n    this.datasourceSubject = new Subject<T[]>();\n  }\n\n  protected checkValidatorFields(validatorService: ValidatorService) {\n    if (!this.config.suppressErrors) return; // Skip, as error will not be logged\n    const formGroup = validatorService.getRowValidator();\n    if(formGroup != null) {\n      const rowKeys = Object.keys(this.createNewObject());\n      const invalidKeys = Object.keys(formGroup.controls).filter(key => !rowKeys.some(x => x === key));\n      if (invalidKeys.length > 0) {\n        this.logError('Validator form control keys must match row object keys. Invalid keys: ' + invalidKeys.toString());\n      }\n    }\n  }\n\n  protected logError(message: string) {\n    if(!this.config.suppressErrors)\n      console.error(message);\n  }\n\n  /**\n   * Start the creation of a new element, pushing an empty-data row in the table.\n   */\n  createNew(): void {\n    const source = this.rowsSubject.getValue();\n\n    if (!this.existsNewElement(source)) {\n\n      const newElement = TableElementFactory.createTableElement({\n        id: -1,\n        editing: true,\n        currentData: this.createNewObject(),\n        source: this,\n        validator: this.validatorService.getRowValidator(),\n      });\n\n      if (this.config.prependNewElements) {\n        this.rowsSubject.next([newElement].concat(source));\n      } else {\n        source.push(newElement);\n        this.rowsSubject.next(source);\n      }\n    }\n  }\n\n  /**\n   * Confirm creation of the row. Save changes and disable editing.\n   * If validation active and row data is invalid, it doesn't confirm creation neither disable editing.\n   * @param row Row to be confirmed.\n   */\n  confirmCreate(row: TableElement<T>): boolean {\n    if (!row.isValid()) {\n      return false\n    }\n\n    const source = this.rowsSubject.getValue();\n    row.id = source.length - 1;\n    this.rowsSubject.next(source);\n\n    row.editing = false;\n\n    this.updateDatasourceFromRows(source);\n    return true;\n  }\n\n  /**\n   * Confirm edition of the row. Save changes and disable editing.\n   * If validation active and row data is invalid, it doesn't confirm editing neither disable editing.\n   * @param row Row to be edited.\n   */\n  confirmEdit(row: TableElement<T>): boolean {\n    if (!row.isValid()) {\n      return false;\n    }\n\n    const source = this.rowsSubject.getValue();\n    const index = this.getIndexFromRowId(row.id, source);\n\n    source[index] = row;\n    this.rowsSubject.next(source);\n\n    row.originalData = undefined;\n    row.editing = false;\n\n    this.updateDatasourceFromRows(source);\n    return true;\n  }\n\n  /**\n   * Delete the row with the index specified.\n   */\n  delete(id: number): void {\n    const source = this.rowsSubject.getValue();\n    const index = this.getIndexFromRowId(id, source);\n\n    source.splice(index, 1);\n    this.updateRowIds(index, source);\n\n    this.rowsSubject.next(source);\n\n    if (id != -1)\n      this.updateDatasourceFromRows(source);\n  }\n\n  /**\n * Get row from the table.\n * @param id Id of the row to retrieve, -1 returns the current new line.\n */\n  getRow(id: number): TableElement<T> {\n    const source = this.rowsSubject.getValue();\n    const index = this.getIndexFromRowId(id, source);\n\n    return (index >= 0 && index < source.length) ? source[index] : null;\n  }\n\n  /**\n   * Update the datasource with a new array of data. If the array reference\n   * is the same as the previous one, it doesn't trigger an update.\n   * @param data Data to update the table datasource.\n   * @param options Specify options to update the datasource.\n   * If emitEvent is true and the datasource is updated, it emits an event\n   * from 'datasourceSubject' with the updated data. If false, it doesn't\n   * emit an event. True by default.\n   */\n  updateDatasource(data: T[], options = { emitEvent: true }): void {\n    if (this.currentData !== data) {\n      this.currentData = data;\n      this.rowsSubject.next(this.getRowsFromData(data))\n\n      if (options.emitEvent)\n        this.datasourceSubject.next(data);\n    }\n  }\n\n\n  /**\n   * Checks the existance of the a new row (not yet saved).\n   * @param source\n   */\n  protected existsNewElement(source: TableElement<T>[]): boolean {\n      return !(source.length == 0 || source[this.getNewRowIndex(source)].id > -1)\n  }\n\n  /**\n   * Returns the possible index of the new row depending on the insertion type.\n   * It doesn't imply that the new row is created, that must be checked.\n   * @param source\n   */\n  protected getNewRowIndex(source): number {\n    if (this.config.prependNewElements)\n      return 0;\n    else\n      return source.length - 1;\n  }\n\n  /**\n   * Returns the row id from the index specified. It does\n   * not consider if the new row is present or not, assumes\n   * that new row is not present.\n   * @param index Index of the array.\n   * @param count Quantity of elements in the array.\n   */\n  protected getRowIdFromIndex(index: number, count: number): number {\n    if (this.config.prependNewElements)\n      return count - 1 - index;\n    else\n      return index;\n  }\n\n  /**\n   * Returns the index from the row id specified.\n   * It takes into account if the new row exists or not.\n   * @param id\n   * @param source\n   */\n  protected getIndexFromRowId(id: number, source: TableElement<T>[]): number {\n    if(id == -1) {\n      return this.existsNewElement(source) ? this.getNewRowIndex(source) : -1;\n    } else {\n      if (this.config.prependNewElements)\n          return source.length - 1 - id;\n      else\n        return id;\n    }\n  }\n\n  /**\n   * Update rows ids in the array specified, starting in the specified index\n   * until the start/end of the array, depending on config.prependNewElements\n   * configuration.\n   * @param initialIndex Initial index of source to be updated.\n   * @param source Array that contains the rows to be updated.\n   */\n  protected updateRowIds(initialIndex: number, source: TableElement<T>[]): void {\n\n    const delta = this.config.prependNewElements ? -1 : 1;\n\n    for (let index = initialIndex; index < source.length && index >= 0; index += delta) {\n      if (source[index].id != -1)\n        source[index].id = this.getRowIdFromIndex(index, source.length);\n    }\n  }\n\n  /**\n   * Get the data from the rows.\n   * @param rows Rows to extract the data.\n   */\n  protected getDataFromRows(rows: TableElement<T>[]): T[] {\n    return rows\n      .filter(row => row.id != -1)\n      .map<T>((row) => {\n      return row.originalData ? row.originalData : row.currentData;\n    });\n  }\n\n  /**\n   * Update the datasource with the data contained in the specified rows.\n   * @param rows Rows that contains the datasource's new data.\n   */\n  protected updateDatasourceFromRows(rows: TableElement<T>[]): void {\n    this.currentData = this.getDataFromRows(rows);\n    this.datasourceSubject.next(this.currentData);\n  }\n\n  /**\n   * From an array of data, it returns rows containing the original data.\n   * @param arrayData Data from which create the rows.\n   */\n  protected getRowsFromData(arrayData: T[]): TableElement<T>[] {\n    return arrayData.map<TableElement<T>>((data, index) => {\n\n      return TableElementFactory.createTableElement({\n        id: this.getRowIdFromIndex(index, arrayData.length),\n        editing: false,\n        currentData: data,\n        source: this,\n        validator: this.validatorService.getRowValidator(),\n      })\n    });\n  }\n\n  /**\n   * Create a new object with identical structure than the table source data.\n   * It uses the object's type contructor if available, otherwise it creates\n   * an object with the same keys of the first element contained in the original\n   * datasource (used in the constructor).\n   */\n  protected createNewObject(): T {\n    if (this.dataConstructor) {\n      return new this.dataConstructor();\n    } else {\n      return this.dataKeys.reduce((obj, key) => {\n        obj[key] = undefined;\n        return obj;\n      }, {});\n    }\n\n  }\n\n  /** Connect function called by the table to retrieve one stream containing\n   *  the data to render. */\n  /*connect(): Observable<TableElement<T>[]> {\n    return this.rowsSubject.asObservable();\n  }*/\n\n  connect(collectionViewer: CollectionViewer): Observable<TableElement<T>[] | ReadonlyArray<TableElement<T>>> {\n    const range: ListRange = {\n      start: 0,\n      end: -1\n    }\n    if (collectionViewer){\n      this.connectedViewers.push({\n        viewer: collectionViewer,\n        range,\n        subscription: collectionViewer.viewChange.subscribe(r => {\n          range.start = r.start;\n          range.end = r.end;\n        })\n      });\n    }\n    return this.rowsSubject.asObservable()\n      .pipe(\n        map(data => {\n          if (range.start > 0) {\n            if (range.end > range.start) {\n              return data.slice(range.start, range.end);\n            }\n            return data.slice(range.start);\n          }\n          return data;\n        })\n      );\n  }\n\n  disconnect(collectionViewer: CollectionViewer) {\n    const ref = this.connectedViewers.find(ref => ref.viewer === collectionViewer);\n    if (ref && ref.subscription) {\n      ref.subscription.unsubscribe();\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\n@Injectable()\nexport abstract class ValidatorService {\n  abstract getRowValidator(): FormGroup;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}